apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: supplychainvisibility-ingress
  namespace: supplychainvisibility
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt # Cert-manager integration for Let's Encrypt
    kubernetes.io/ingress.class: alb # Specify NGINX Ingress class
    nginx.ingress.kubernetes.io/affinity: cookie # Enable session affinity (sticky sessions)
    nginx.ingress.kubernetes.io/proxy-body-size: '0' # Allow unlimited body size
    nginx.ingress.kubernetes.io/proxy-read-timeout: '600' # Proxy read timeout (600 seconds)
    nginx.ingress.kubernetes.io/proxy-send-timeout: '600' # Proxy send timeout (600 seconds)
    nginx.ingress.kubernetes.io/session-cookie-expires: '172800' # Session cookie expiry (2 days)
    nginx.ingress.kubernetes.io/session-cookie-max-age: '172800' # Max age for session cookies (2 days)
    nginx.ingress.kubernetes.io/session-cookie-path: / # Path for session cookies
    nginx.ingress.kubernetes.io/session-cookie-samesite: None # SameSite cookie policy
    nginx.ingress.kubernetes.io/session-cookie-secure: 'true' # Secure cookie (only sent over HTTPS)
    nginx.ingress.kubernetes.io/use-regex: 'true' # Enable use of regular expressions for paths
    nginx.ingress.kubernetes.io/websocket-services: notificationhandlerconsumer,supplierengagementsocket # WebSocket support
  managedFields:
    - manager: nginx-ingress-controller
      operation: Update
      apiVersion: networking.k8s.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:loadBalancer:
            f:ingress: {}
      subresource: status
    - manager: Mozilla
      operation: Update
      apiVersion: networking.k8s.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cert-manager.io/cluster-issuer: {}
            f:kubernetes.io/ingress.class: {}
            f:nginx.ingress.kubernetes.io/affinity: {}
            f:nginx.ingress.kubernetes.io/proxy-body-size: {}
            f:nginx.ingress.kubernetes.io/proxy-read-timeout: {}
            f:nginx.ingress.kubernetes.io/proxy-send-timeout: {}
            f:nginx.ingress.kubernetes.io/session-cookie-expires: {}
            f:nginx.ingress.kubernetes.io/session-cookie-max-age: {}
            f:nginx.ingress.kubernetes.io/session-cookie-path: {}
            f:nginx.ingress.kubernetes.io/session-cookie-samesite: {}
            f:nginx.ingress.kubernetes.io/session-cookie-secure: {}
            f:nginx.ingress.kubernetes.io/use-regex: {}
            f:nginx.ingress.kubernetes.io/websocket-services: {}
        f:spec:
          f:ingressClassName: {}
          f:rules: {}
          f:tls: {}
spec:
  ingressClassName: alb # Ensure the NGINX Ingress controller is used
  tls:
    - hosts:
        - gke.golive.settyl.com # Specify the host for TLS
      secretName: tls-secret # Replace with your TLS secret
  rules:
    - host: gke.golive.settyl.com # Define the hostname for routing
      http:
        paths:
          - path: /api/healthcheck # Define the path for health check
            pathType: Prefix
            backend:
              service:
                name: configmanagementapi # The backend service to route to
                port:
                  number: 8000 # The service port
